{"version":3,"sources":["../node_modules/peerjs/dist sync","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","App","useState","peerId","setPeerId","pingMS","setPingMS","videoRef","useRef","init","a","peer","Peer","on","conn","console","log","data","moment","diff","dt","setTimeout","send","toISOString","call","answer","stream","current","srcObject","err","useEffect","className","autoPlay","ref","controls","style","height","width","onMouseMove","movementX","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iGAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,qLCqDVC,MAxDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEeF,mBAAS,GAFxB,mBAENG,EAFM,KAEEC,EAFF,KAGPC,EAAWC,iBAAyB,MAEpCC,EAAI,uCAAG,4BAAAC,EAAA,uDACLC,EAAO,IAAIC,KACZC,GAAG,QAAQ,SAAUb,GACxBI,EAAUJ,GACVW,EAAKE,GAAG,cAAc,SAAUC,GAC9BC,QAAQC,IAAI,cACZF,EAAKD,GAAG,QAAQ,SAAUI,GACxBX,EAAUY,MAASC,KAAKF,EAAKG,GAAI,iBACjCC,YAAW,WACTP,EAAKQ,KAAK,CAAEF,GAAIF,MAASK,kBACxB,QAILT,EAAKQ,KAAK,CAAEF,GAAIF,MAASK,mBAG3BZ,EAAKE,GAAG,QAAQ,SAAUW,GAExBA,EAAKC,SACLD,EAAKX,GAAG,UAAU,SAAUa,GACtBnB,EAASoB,UAASpB,EAASoB,QAAQC,UAAYF,SAIvDf,EAAKE,GAAG,SAAS,SAAUgB,GACzBd,QAAQC,IAAIa,SA1BL,2CAAH,qDAkCV,OAHAC,qBAAU,WACRrB,MACC,IAED,sBAAKsB,UAAU,MAAf,UACE,8CAAe5B,KACf,4CAAaE,KACb,uBACE2B,UAAQ,EACRC,IAAK1B,EACL2B,UAAQ,EACRC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,KAC7BC,YAAa,SAAC7C,GACZsB,QAAQC,IAAIvB,EAAE8C,kBCxCTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.492878ec.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 15;","import React, { useEffect, useRef, useState } from \"react\";\nimport Peer from \"peerjs\";\nimport moment from \"moment\";\nimport \"./App.css\";\n\nfunction App() {\n  const [peerId, setPeerId] = useState(\"\");\n  const [pingMS, setPingMS] = useState(0);\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const init = async () => {\n    const peer = new Peer();\n    peer.on(\"open\", function (id) {\n      setPeerId(id);\n      peer.on(\"connection\", function (conn) {\n        console.log(\"conectouuu\");\n        conn.on(\"data\", function (data) {\n          setPingMS(moment().diff(data.dt, \"milliseconds\"));\n          setTimeout(() => {\n            conn.send({ dt: moment().toISOString() });\n          }, 1000);\n        });\n\n        // Send messages\n        conn.send({ dt: moment().toISOString() });\n      });\n\n      peer.on(\"call\", function (call) {\n        // Answer the call, providing our mediaStream\n        call.answer();\n        call.on(\"stream\", function (stream) {\n          if (videoRef.current) videoRef.current.srcObject = stream;\n        });\n      });\n\n      peer.on(\"error\", function (err) {\n        console.log(err);\n      });\n    });\n  };\n\n  useEffect(() => {\n    init();\n  }, []);\n  return (\n    <div className=\"App\">\n      <p>{`peerId: ${peerId}`}</p>\n      <p>{`ping: ${pingMS}`}</p>\n      <video\n        autoPlay\n        ref={videoRef}\n        controls\n        style={{ height: 400, width: 600 }}\n        onMouseMove={(e) => {\n          console.log(e.movementX);\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}